<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>亦朴</title>
  
  
  <link href="http://wano.pro/atom.xml" rel="self"/>
  
  <link href="http://wano.pro/"/>
  <updated>2021-02-26T05:55:08.612Z</updated>
  <id>http://wano.pro/</id>
  
  <author>
    <name>亦朴</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>valine评论问题记录</title>
    <link href="http://wano.pro/error/valine%E8%AF%84%E8%AE%BA%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://wano.pro/error/valine%E8%AF%84%E8%AE%BA%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2021-02-26T05:50:50.000Z</published>
    <updated>2021-02-26T05:55:08.612Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><blockquote><p>valine评论数据无法达到leandCloud ， request 请求失败 403错误</p></blockquote><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p><del>现在如果使用国际版LeanCloud作为Valine评论的后端的话则必须指定自定义服务器URL才能正常使用了。</del><br>通用域名us.avoscloud.com现在已经恢复正常，但是毕竟还是不稳定，还是推荐指定自定义服务器URL。<a href="https://forum.leancloud.cn/t/us-avoscloud-com/23415">LeanCloud官方已不推荐使用通用域名。</a></p><p>自定义服务器的URL需要到LeanCloud后台查看。打开后台之后进入Settings - App Keys，找到Domain whitelist，里面的Request domain里面的那个xxxxxxxx.api.lncldglobal.com就是你需要指定的服务器URL。其中xxxxxxxx就是各位的AppID的前8位字符。</p><p>NexT主题需要在主题的<code>_config.yml</code>找到<code>valine</code>的<code>serverURLs</code>，设置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serverURLs: https:&#x2F;&#x2F;xxxxxxxx.api.lncldglobal.com # 把xxxxxxxx替换成你自己AppID的前8位字符</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">更改前：</span><br><span class="line">GET https://us.avoscloud.com/1.1/classes/Comment?where=xxxxxx   net::ERR_TIMED_OUT</span><br><span class="line">更改后：</span><br><span class="line">GET https://gears233.github.io/posts/mail/xxxxx.api.lncldglobal.com/1.1/classes/Comment?where=xxxxxx</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;valine评论数据无法达到leandCloud ， request 请求失败 403错误&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="valine" scheme="http://wano.pro/tags/valine/"/>
    
  </entry>
  
  <entry>
    <title>解决ubuntu升级Kernel5.10后vmware-workstation无法启动问题</title>
    <link href="http://wano.pro/ubuntu/%E8%A7%A3%E5%86%B3ubuntu%E5%8D%87%E7%BA%A7Kernel5-10%E5%90%8Evmware-workstation%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98-1/"/>
    <id>http://wano.pro/ubuntu/%E8%A7%A3%E5%86%B3ubuntu%E5%8D%87%E7%BA%A7Kernel5-10%E5%90%8Evmware-workstation%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98-1/</id>
    <published>2020-12-17T07:19:50.000Z</published>
    <updated>2020-12-23T19:10:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>查找资料发现，每次linux内核更新，都会导致VMware Workstation 的vmmon 和vmnet俩模块的编译失败。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wanlce/Picture/img/20201217152539.png"></p><p>提示有两个问题</p><ul><li>serveral module 需要重新编译</li><li>找不到gcc version 10.2.0</li></ul><hr><p>第一个问题网上找资料发现大佬的<a href="https://github.com/mkubecek/vmware-host-modules">patch</a></p><p><strong>解决方法如下</strong></p><ol><li><p>git clone 仓库并进入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/mkubecek/vmware-host-modules.git</span><br></pre></td></tr></table></figure></li><li><p>切换vmware workstation 所对应版本的分支 （vmware -v）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout workstation-16.1.0</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -cf vmmon.tar vmmon-only</span><br><span class="line">tar -cf vmnet.tar vmnet-only</span><br><span class="line">sudo cp -v vmmon.tar vmnet.tar &#x2F;usr&#x2F;lib&#x2F;vmware&#x2F;modules&#x2F;source</span><br></pre></td></tr></table></figure></li><li><p>重新编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vmware-modconfig --console --install-all   </span><br></pre></td></tr></table></figure><p>发现报错说找不到gcc的信息<br>[AppLoader] GLib does not have GSettings support.<br>Failed to get gcc information.<br>猜测是gcc版本过低 (已安装gcc-9)</p></li></ol><p><strong>gcc 版本升级</strong><br><strong>操作步骤</strong></p><ol><li>安装两个依赖库 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-software-properties</span><br><span class="line">sudo apt-get install software-properties-common</span><br></pre></td></tr></table></figure></li><li>更新apt-get的库源 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r&#x2F;test</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li>安装gcc <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gcc-10</span><br><span class="line">sudo apt-get install g++-10</span><br></pre></td></tr></table></figure></li></ol><p>安装完成后重新编译，执行完成，vmware workstation正常启动。</p>]]></content>
    
    
    <summary type="html">今天升级了一下ubuntu内核，发现vmware-workstation-16.1.0无法正常启动，多方搜寻解决后，总结一下遇到的问题。</summary>
    
    
    
    <category term="ubuntu" scheme="http://wano.pro/categories/ubuntu/"/>
    
    
    <category term="ubuntu、vmware" scheme="http://wano.pro/tags/ubuntu%E3%80%81vmware/"/>
    
  </entry>
  
  <entry>
    <title>MapReduce shuffle 和 Spark Shuffle</title>
    <link href="http://wano.pro/BigData/shuffle/"/>
    <id>http://wano.pro/BigData/shuffle/</id>
    <published>2020-10-22T01:54:11.000Z</published>
    <updated>2021-02-26T04:16:09.134Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载于:<a href="https://mp.weixin.qq.com/s/7849pfq-woqBz08jqFw03Q">https://mp.weixin.qq.com/s/7849pfq-woqBz08jqFw03Q</a></p></blockquote><h3 id="Shuffle-简介"><a href="#Shuffle-简介" class="headerlink" title="Shuffle 简介"></a>Shuffle 简介</h3><p>Shuffle的本意是洗牌、混洗的意思，把一组有规则的数据尽量打乱成无规则的数据。而在MapReduce中，Shuffle更像是洗牌的逆过程，指的是将map端的无规则输出按指定的规则“打乱”成具有一定规则的数据，以便reduce端接收处理。其在MapReduce中所处的工作阶段是map输出后到reduce接收前，具体可以分为map端和reduce端前后两个部分。</p><p>在Shuffle之前，也就是在map阶段，MapReduce会对要处理的数据进行分片（split）操作，为每一个分片分配一个MapTask任务。接下来map会对每一个分片中的每一行数据进行处理得到键值对（key,value）此时得到的键值对又叫做“中间结果”。此后便进入reduce阶段，由此可以看出Shuffle阶段的作用是处理“中间结果”。</p><p>由于Shuffle涉及到了磁盘的读写和网络的传输，因此Shuffle性能的高低直接影响到了整个程序的运行效率。</p><h3 id="MapReduce-Shuffle"><a href="#MapReduce-Shuffle" class="headerlink" title="MapReduce Shuffle"></a>MapReduce Shuffle</h3><p>Hadoop的核心思想是MapReduce,Shuffle是MapReduce的核心.Shuffle主要工作是从Map结束到Reduce开始之间的过程.Shuffle阶段又可以分为Map端的Shuffle和Reduce端的shuffle.</p><h4 id="Map端的shuffle"><a href="#Map端的shuffle" class="headerlink" title="Map端的shuffle"></a>Map端的shuffle</h4><p>下图是MapReduce Shuffle的官方流程：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wanlce/Picture/imgs20201022103522.png"></p><p>因为频繁的磁盘I/O操作会严重的降低效率，因此“中间结果”不会立马写入磁盘，而是优先存储到map节点的“环形内存缓冲区”，在写入的过程中进行分区（partition），也就是对于每个键值对来说，都增加了一个partition属性值，然后连同键值对一起序列化成字节数组写入到缓冲区（缓冲区采用的就是字节数组，默认大小为100M）。</p><p>当写入的数据量达到预先设置的阙值后便会启动溢写出线程将缓冲区中的那部分数据溢出写（spill）到磁盘的临时文件中，并在写入前根据key进行排序（sort）和合并（combine，可选操作）。</p><p>溢出写过程按轮询方式将缓冲区中的内容写到mapreduce.cluster.local.dir属性指定的本地目录中。当整个map任务完成溢出写后，会对磁盘中这个map任务产生的所有临时文件（spill文件）进行归并（merge）操作生成最终的正式输出文件，此时的归并是将所有spill文件中的相同partition合并到一起，并对各个partition中的数据再进行一次排序（sort），生成key和对应的value-list，文件归并时，如果溢写文件数量超过参数min.num.spills.for.combine的值（默认为3）时，可以再次进行合并。</p><p>至此map端的工作已经全部结束，最终生成的文件也会存储在TaskTracker能够访问的位置。每个reduce task不间断的通过RPC从JobTracker那里获取map task是否完成的信息，如果得到的信息是map task已经完成，那么Shuffle的后半段开始启动。</p><h4 id="Reduce端的shuffle"><a href="#Reduce端的shuffle" class="headerlink" title="Reduce端的shuffle"></a>Reduce端的shuffle</h4><p>当mapreduce任务提交后，reduce task就不断通过RPC从JobTracker那里获取map task是否完成的信息，如果获知某台TaskTracker上的map task执行完成，Shuffle的后半段过程就开始启动。Reduce端的shuffle主要包括三个阶段，copy、merge和reduce。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wanlce/Picture/img/20201217172624.png" alt="img"></p><p>每个reduce task负责处理一个分区的文件，以下是reduce task的处理流程：</p><ol><li>reduce task从每个map task的结果文件中拉取对应分区的数据。因为数据在map阶段已经是分好区了，并且会有一个额外的索引文件记录每个分区的起始偏移量。所以reduce task取数的时候直接根据偏移量去拉取数据就ok。</li><li>reduce task从每个map task拉取分区数据的时候会进行再次合并，排序，按照自定义的reducer的逻辑代码去处理。</li><li>最后就是Reduce过程了，在这个过程中产生了最终的输出结果，并将其写到HDFS上。</li></ol><h3 id="为什么要排序"><a href="#为什么要排序" class="headerlink" title="为什么要排序"></a>为什么要排序</h3><ol><li>key存在combine操作，排序之后相同的key放到一块显然方便做合并操作。</li><li>reduce task是按key去处理数据的。 如果没有排序那必须从所有数据中把当前相同key的所有value数据拿出来，然后进行reduce逻辑处理。显然每个key到这个逻辑都需要做一次全量数据扫描，影响性能，有了排序很方便的得到一个key对于的value集合。</li><li>reduce task按key去处理数据时，如果key按顺序排序，那么reduce task就按key顺序去读取，显然当读到的key是文件末尾的key那么就标志数据处理完毕。如果没有排序那还得有其他逻辑来记录哪些key处理完了，哪些key没有处理完。</li></ol><p>虽有千万种理由需要这么做，但是很耗资源，并且像排序其实我们有些业务并不需要排序。</p><h3 id="为什么要文件合并"><a href="#为什么要文件合并" class="headerlink" title="为什么要文件合并"></a>为什么要文件合并</h3><ol><li>因为内存放不下就会溢写文件，就会发生多次溢写，形成很多小文件，如果不合并，显然会小文件泛滥，集群需要资源开销去管理这些小文件数据。</li><li>任务去读取文件的数增多，打开的文件句柄数也会增多。</li><li>mapreduce是全局有序。单个文件有序，不代表全局有序，只有把小文件合并一起排序才会全局有序。</li></ol><h2 id="Spark的Shuffle"><a href="#Spark的Shuffle" class="headerlink" title="Spark的Shuffle"></a>Spark的Shuffle</h2><p>Spark的Shuffle是在MapReduce Shuffle基础上进行的调优。其实就是对排序、合并逻辑做了一些优化。在Spark中Shuffle write相当于MapReduce 的map，Shuffle read相当于MapReduce 的reduce。</p><p>Spark丰富了任务类型，有些任务之间数据流转不需要通过Shuffle，但是有些任务之间还是需要通过Shuffle来传递数据，比如宽依赖的group by key以及各种by key算子。宽依赖之间会划分stage，而Stage之间就是Shuffle，如下图中的stage0，stage1和stage3之间就会产生Shuffle。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wanlce/Picture/img/20201217190242.png" alt="img"></p><p>在Spark的中，负责shuffle过程的执行、计算和处理的组件主要就是ShuffleManager，也即shuffle管理器。ShuffleManager随着Spark的发展有两种实现的方式，分别为HashShuffleManager和SortShuffleManager，因此spark的Shuffle有Hash Shuffle和Sort Shuffle两种。</p><p><strong>Spark Shuffle发展史</strong></p><p>Spark 0.8及以前 Hash Based Shuffle</p><p>Spark 0.8.1 为Hash Based Shuffle引入File Consolidation机制</p><p>Spark 0.9 引入ExternalAppendOnlyMap</p><p>Spark 1.1 引入Sort Based Shuffle，但默认仍为Hash Based Shuffl</p><p>Spark 1.2 默认的Shuffle方式改为Sort Based Shuffle</p><p>Spark 1.4 引入Tungsten-Sort Based Shuffle</p><p>Spark 1.6 Tungsten-sort并入Sort Based Shuffle</p><p>Spark 2.0 Hash Based Shuffle退出历史舞台</p><p>在Spark的版本的发展，ShuffleManager在不断迭代，变得越来越先进。<br>在Spark 1.2以前，默认的shuffle计算引擎是HashShuffleManager。该ShuffleManager而HashShuffleManager有着一个非常严重的弊端，就是会产生大量的中间磁盘文件，进而由大量的磁盘IO操作影响了性能。因此在Spark 1.2以后的版本中，默认的ShuffleManager改成了SortShuffleManager。</p><p>SortShuffleManager相较于HashShuffleManager来说，有了一定的改进。主要就在于，每个Task在进行shuffle操作时，虽然也会产生较多的临时磁盘文件，但是最后会将所有的临时文件合并(merge)成一个磁盘文件，因此每个Task就只有一个磁盘文件。在下一个stage的shuffle read task拉取自己的数据时，只要根据索引读取每个磁盘文件中的部分数据即可。</p><h3 id="Hash-Shuffle"><a href="#Hash-Shuffle" class="headerlink" title="Hash Shuffle"></a>Hash Shuffle</h3><p>HashShuffleManager的运行机制主要分成两种，一种是普通运行机制，另一种是合并的运行机制。合并机制主要是通过复用buffer来优化Shuffle过程中产生的小文件的数量。Hash shuffle是不具有排序的Shuffle。</p><h4 id="普通机制的Hash-Shuffle"><a href="#普通机制的Hash-Shuffle" class="headerlink" title="普通机制的Hash Shuffle"></a>普通机制的Hash Shuffle</h4><p>最开始使用的Hash Based Shuffle，每个Mapper会根据Reducer的数量创建对应的bucket，bucket的数量是M * R，M是map的数量，R是Reduce的数量。<br>如下图所示：2个core 4个map task 3 个reduce task，会产生4*3=12个小文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wanlce/Picture/img/20201217190424.png" alt="img"></p><h4 id="优化后的Hash-Shuffle"><a href="#优化后的Hash-Shuffle" class="headerlink" title="优化后的Hash Shuffle"></a>优化后的Hash Shuffle</h4><p>普通机制Hash Shuffle会产生大量的小文件(M * R），对文件系统的压力也很大，也不利于IO的吞吐量，后来做了优化（设置spark.shuffle.consolidateFiles=true开启，默认false），把在同一个core上的多个Mapper输出到同一个文件，这样文件数就变成core * R 个了。<br>如下图所示：2个core 4个map task 3 个reduce task，会产生2*3=6个小文件。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wanlce/Picture/img/20201217190511.png" alt="img"></p><p>Hash shuffle合并机制的问题：<br>如果 Reducer 端的并行任务或者是数据分片过多的话则 Core * Reducer Task 依旧过大，也会产生很多小文件。进而引出了更优化的sort shuffle。<br>在Spark 1.2以后的版本中，默认的ShuffleManager改成了SortShuffleManager。</p><h3 id="Sort-Shuffle"><a href="#Sort-Shuffle" class="headerlink" title="Sort Shuffle"></a>Sort Shuffle</h3><p>SortShuffleManager的运行机制主要分成两种，一种是普通运行机制，另一种是bypass运行机制。当shuffle read task的数量小于等于spark.shuffle.sort.bypassMergeThreshold参数的值时(默认为200)，就会启用bypass机制。</p><h4 id="普通机制的Sort-Shuffle"><a href="#普通机制的Sort-Shuffle" class="headerlink" title="普通机制的Sort Shuffle"></a>普通机制的Sort Shuffle</h4><p>这种机制和mapreduce差不多，在该模式下，数据会先写入一个内存数据结构中，此时根据不同的shuffle算子，可能选用不同的数据结构。如果是reduceByKey这种聚合类的shuffle算子，那么会选用Map数据结构，一边通过Map进行聚合，一边写入内存；如果是join这种普通的shuffle算子，那么会选用Array数据结构，直接写入内存。接着，每写一条数据进入内存数据结构之后，就会判断一下，是否达到了某个临界阈值。如果达到临界阈值的话，那么就会尝试将内存数据结构中的数据溢写到磁盘，然后清空内存数据结构。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wanlce/Picture/img/20201217190613.png" alt="img"></p><p>在溢写到磁盘文件之前，会先根据key对内存数据结构中已有的数据进行排序。排序过后，会分批将数据写入磁盘文件。默认的batch数量是10000条，也就是说，排序好的数据，会以每批1万条数据的形式分批写入磁盘文件。<br>一个task将所有数据写入内存数据结构的过程中，会发生多次磁盘溢写操作，也会产生多个临时文件。最后会将之前所有的临时磁盘文件都进行合并，由于一个task就只对应一个磁盘文件因此还会单独写一份索引文件，其中标识了下游各个task的数据在文件中的start offset与end offset。<br>SortShuffleManager由于有一个磁盘文件merge的过程，因此大大减少了文件数量，由于每个task最终只有一个磁盘文件所以文件个数等于上游shuffle write个数。</p><h4 id="bypass机制的Sort-Shuffle"><a href="#bypass机制的Sort-Shuffle" class="headerlink" title="bypass机制的Sort Shuffle"></a>bypass机制的Sort Shuffle</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wanlce/Picture/img/20201217190627.png" alt="img"></p><p>bypass运行机制的触发条件如下：<br>1)shuffle map task数量小于spark.shuffle.sort.bypassMergeThreshold参数的值，默认值200。</p><p>2)不是聚合类的shuffle算子(比如reduceByKey)。</p><p>此时task会为每个reduce端的task都创建一个临时磁盘文件，并将数据按key进行hash然后根据key的hash值，将key写入对应的磁盘文件之中。当然，写入磁盘文件时也是先写入内存缓冲，缓冲写满之后再溢写到磁盘文件的。最后，同样会将所有临时磁盘文件都合并成一个磁盘文件，并创建一个单独的索引文件。</p><p>该过程的磁盘写机制其实跟未经优化的HashShuffleManager是一模一样的，因为都要创建数量惊人的磁盘文件，只是在最后会做一个磁盘文件的合并而已。因此少量的最终磁盘文件，也让该机制相对未经优化的HashShuffleManager来说，shuffle read的性能会更好。</p><p>而该机制与普通SortShuffleManager运行机制的不同在于：<br>第一，磁盘写机制不同;<br>第二，不会进行排序。也就是说，启用该机制的最大好处在于，shuffle write过程中，不需要进行数据的排序操作，也就节省掉了这部分的性能开销。</p><h3 id="Spark-Shuffle总结"><a href="#Spark-Shuffle总结" class="headerlink" title="Spark Shuffle总结"></a>Spark Shuffle总结</h3><p>Shuffle 过程本质上都是将 Map 端获得的数据使用分区器进行划分，并将数据发送给对应的 Reducer 的过程。</p><p>Shuffle作为处理连接map端和reduce端的枢纽，其shuffle的性能高低直接影响了整个程序的性能和吞吐量。map端的shuffle一般为shuffle的Write阶段，reduce端的shuffle一般为shuffle的read阶段。Hadoop和spark的shuffle在实现上面存在很大的不同，spark的shuffle分为两种实现，分别为HashShuffle和SortShuffle。</p><p>HashShuffle又分为普通机制和合并机制，普通机制因为其会产生M * R个数的巨量磁盘小文件而产生大量性能低下的Io操作，从而性能较低，因为其巨量的磁盘小文件还可能导致OOM，HashShuffle的合并机制通过重复利用buffer从而将磁盘小文件的数量降低到Core * R个，但是当Reducer 端的并行任务或者是数据分片过多的时候，依然会产生大量的磁盘小文件。</p><p>SortShuffle也分为普通机制和bypass机制，普通机制在内存数据结构(默认为5M)完成排序，会产生2M个磁盘小文件。而当shuffle map task数量小于spark.shuffle.sort.bypassMergeThreshold参数的值。或者算子不是聚合类的shuffle算子(比如reduceByKey)的时候会触发SortShuffle的bypass机制，SortShuffle的bypass机制不会进行排序，极大的提高了其性能。</p><p>在Spark 1.2以前，默认的shuffle计算引擎是HashShuffleManager，因为HashShuffleManager会产生大量的磁盘小文件而性能低下，在Spark 1.2以后的版本中，默认的ShuffleManager改成了SortShuffleManager。</p><p>SortShuffleManager相较于HashShuffleManager来说，有了一定的改进。主要就在于，每个Task在进行shuffle操作时，虽然也会产生较多的临时磁盘文件，但是最后会将所有的临时文件合并(merge)成一个磁盘文件，因此每个Task就只有一个磁盘文件。在下一个stage的shuffle read task拉取自己的数据时，只要根据索引读取每个磁盘文件中的部分数据即可。</p><h2 id="Spark与MapReduce-Shuffle的异同"><a href="#Spark与MapReduce-Shuffle的异同" class="headerlink" title="Spark与MapReduce Shuffle的异同"></a>Spark与MapReduce Shuffle的异同</h2><ol><li>从整体功能上看，两者并没有大的差别。 都是将 mapper（Spark 里是 ShuffleMapTask）的输出进行 partition，不同的 partition 送到不同的 reducer（Spark 里 reducer 可能是下一个 stage 里的 ShuffleMapTask，也可能是 ResultTask）。Reducer 以内存作缓冲区，边 shuffle 边 aggregate 数据，等到数据 aggregate 好以后进行 reduce（Spark 里可能是后续的一系列操作）。</li><li>从流程的上看，两者差别不小。 Hadoop MapReduce 是 sort-based，进入 combine和 reduce的 records 必须先 sort。这样的好处在于 combine/reduce可以处理大规模的数据，因为其输入数据可以通过外排得到（mapper 对每段数据先做排序，reducer 的 shuffle 对排好序的每段数据做归并）。以前 Spark 默认选择的是 hash-based，通常使用 HashMap 来对 shuffle 来的数据进行合并，不会对数据进行提前排序。如果用户需要经过排序的数据，那么需要自己调用类似 sortByKey的操作。在Spark 1.2之后，sort-based变为默认的Shuffle实现。</li><li>从流程实现角度来看，两者也有不少差别。 Hadoop MapReduce 将处理流程划分出明显的几个阶段：map, spill, merge, shuffle, sort, reduce等。每个阶段各司其职，可以按照过程式的编程思想来逐一实现每个阶段的功能。在 Spark 中，没有这样功能明确的阶段，只有不同的 stage 和一系列的 transformation，所以 spill, merge, aggregate 等操作需要蕴含在 transformation中。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载于:&lt;a href=&quot;https://mp.weixin.qq.com/s/7849pfq-woqBz08jqFw03Q&quot;&gt;https://mp.weixin.qq.com/s/7849pfq-woqBz08jqFw03Q&lt;/a&gt;&lt;/p&gt;
&lt;/</summary>
      
    
    
    
    <category term="BigData" scheme="http://wano.pro/categories/BigData/"/>
    
    
    <category term="shuffle" scheme="http://wano.pro/tags/shuffle/"/>
    
  </entry>
  
  <entry>
    <title>计算机操作系统知识点</title>
    <link href="http://wano.pro/study/os/"/>
    <id>http://wano.pro/study/os/</id>
    <published>2020-10-22T01:51:40.000Z</published>
    <updated>2021-02-22T02:03:05.589Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><hr><blockquote><p>为什么要了解操作系统、</p><p>操作系统中的很多思想、很多经典的算法，你都可以在我们日常开发使用的各种工具或者框架中找到它们的影子。</p></blockquote><h2 id="一-操作系统基础"><a href="#一-操作系统基础" class="headerlink" title="一 操作系统基础"></a>一 操作系统基础</h2><h3 id="1-1-什么是操作系统"><a href="#1-1-什么是操作系统" class="headerlink" title="1.1 什么是操作系统"></a>1.1 什么是操作系统</h3><ol><li>操作系统是管理计算机硬件与软件资源的程序，是计算机的基石</li><li>操作系统本质上是一个运行在计算机上的软件程序，用于管理计算机硬件和软件资源</li><li>操作系统存在屏蔽了硬件层的复杂性</li><li>操作系统的内核是操作系统的核心部分，它负责系统的内存管理，硬件设备的管理，文件系统的管理以及应用程序的管理</li></ol><h3 id="1-2-系统调用"><a href="#1-2-系统调用" class="headerlink" title="1.2 系统调用"></a>1.2 系统调用</h3><blockquote><p>用户态：==用户态运行的进程或可直接读取用户程序的数据==</p><p>系统态：==可以简单的理解系统态运行的进程或程序几乎可以访问计算机的任何资源，不受限制==</p></blockquote><p>什么是系统调用？</p><p>​    <em>我们运行的程序基本都是运行在用户态，如果迪奥哟操作系统提供的系统态级别的子功能怎么办？那就需要系统调用！</em></p><p>​    <em>也就是说在我们运行的用户程序中，凡是与系统态级别的资源有关的操作（如文件管理、进程控制、内存管理等），都必须通过系统调用的方式向操作系统提出服务请求，并由操作系统代为完成</em></p><ul><li>设备管理</li><li>文件管理</li><li>进程控制</li><li>进程通信</li><li>内存管理</li></ul><h2 id="二-进程和线程"><a href="#二-进程和线程" class="headerlink" title="二 进程和线程"></a>二 进程和线程</h2><h3 id="2-1-进程和线程的区别"><a href="#2-1-进程和线程的区别" class="headerlink" title="2.1 进程和线程的区别"></a>2.1 进程和线程的区别</h3><p>==从JVM的角度来说线程与进程之间的关系==</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wanlce/Picture@master/imgs/20210206101528.png"></p><p>一个进程可以有多个线程、多个线程共享的堆和方法区（JDk1.8之后的元空间）资源，但是每个线程有自己的程序计数器、虚拟机栈和本地方法栈</p><p>==总结： 线程是进程划分成的更小的运行单位，一个进程在其执行的过程中可以产生多个线程。线程和进                    程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为统一进程中的线程可能会相                    互影响。线程执行开销小，但是不利于资源的管理和保护；而进程正相反==</p><h3 id="2-2-进程的状态"><a href="#2-2-进程的状态" class="headerlink" title="2.2 进程的状态"></a>2.2 进程的状态</h3><p>​    一般把进程分为5种状态，这一点和线程很像！</p><pre><code>- 创建状态- 就绪状态- 运行状态- 阻塞状态- 结束状态</code></pre><h3 id="2-3-进程的通信方式"><a href="#2-3-进程的通信方式" class="headerlink" title="2.3 进程的通信方式"></a>2.3 进程的通信方式</h3><blockquote><p>大概有七中常见的进程间通信方式</p></blockquote><ol><li><strong>管道 / 匿名管道 (Pipes)</strong> ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。</li><li><strong>有名管道 (Names Pipes)</strong> : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循**先进先出 (first in first out)**。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。</li><li><strong>信号 (Signal)</strong> ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；</li><li><strong>消息队列 (Message Queuing)</strong> ：消息队列是消息的链表, 具有特定的格式, 存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启 (即，操作系统重启) 或者显示地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询, 消息不一定要以先进先出的次序读取, 也可以按消息的类型读取. 比 FIFO 更有优势。<strong>消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺。</strong></li><li><strong>信号量 (Semaphores)</strong> ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。</li><li><strong>共享内存 (Shared memory)</strong> ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。</li><li><strong>套接字 (Sockets)</strong> : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程</li></ol><h3 id="2-4-线程间的同步方式有那些"><a href="#2-4-线程间的同步方式有那些" class="headerlink" title="2.4 线程间的同步方式有那些"></a>2.4 线程间的同步方式有那些</h3><blockquote><p>线程同步是两个或多个共享关键资源的线程的并发执行。应该同步线程以避免关键的资源使用冲突。</p></blockquote><ol><li>**互斥量 (Mutex)**：采用互斥对象机制，只有拥有互斥对象的线程才有访问公共资源的权限。因为互斥对象只有一个，所以可以保证公共资源不会被多个线程同时访问。比如 Java 中的 synchronized 关键词和各种 Lock 都是这种机制。</li><li><strong>信号量 (Semphares)</strong> ：它允许同一时刻多个线程访问同一资源，但是需要控制同一时刻访问此资源的最大线程数量</li><li><strong>事件 (Event)</strong> :Wait/Notify：通过通知操作的方式来保持多线程同步，还可以方便的实现多线程优先级的比较操作</li></ol><h3 id="2-5-进程的调度算法"><a href="#2-5-进程的调度算法" class="headerlink" title="2.5 进程的调度算法"></a>2.5 进程的调度算法</h3><blockquote><p>为了确定首先执行哪个进程以及最后执行哪个进程以实现最大CPU利用率，计算机科学家定义了一些算法</p></blockquote><ul><li><strong>先到先服务 (FCFS) 调度算法</strong> : 从就绪队列中选择一个最先进入该队列的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li><li><strong>短作业优先 (SJF) 的调度算法</strong> : 从就绪队列中选出一个估计运行时间最短的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li><li><strong>时间片轮转调度算法</strong> : 时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法，又称 RR(Round robin) 调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。</li><li><strong>多级反馈队列调度算法</strong> ：前面介绍的几种进程调度的算法都有一定的局限性。如<strong>短进程优先的调度算法，仅照顾了短进程而忽略了长进程</strong> 。多级反馈队列调度算法既能使高优先级的作业得到响应又能使短作业（进程）迅速完成。，因而它是目前<strong>被公认的一种较好的进程调度算法</strong>，UNIX 操作系统采取的便是这种调度算法。</li><li><strong>优先级调度</strong> ： 为每个流程分配优先级，首先执行具有最高优先级的进程，依此类推。具有相同优先级的进程以 FCFS 方式执行。可以根据内存要求，时间要求或任何其他资源要求来确定优先级。</li></ul><h2 id="三-操作系统内存管理基础"><a href="#三-操作系统内存管理基础" class="headerlink" title="三 操作系统内存管理基础"></a>三 操作系统内存管理基础</h2><h3 id="3-1-OS的内存管理主要是做什么的"><a href="#3-1-OS的内存管理主要是做什么的" class="headerlink" title="3.1 OS的内存管理主要是做什么的"></a>3.1 OS的内存管理主要是做什么的</h3><blockquote><p>操作系统的内存管理主要负责内存的分配与回收（Malloc函数：申请内存，free函数： 释放内存），另外地址转换也就是将逻辑地址转换成相应的物理地址等功能也是操作系统内存管理的做的事情。</p></blockquote><h3 id="3-2-常见的几种内存管理机制"><a href="#3-2-常见的几种内存管理机制" class="headerlink" title="3.2 常见的几种内存管理机制"></a>3.2 常见的几种内存管理机制</h3><blockquote><p>简单的分为==连续分配管理方式== 和 ==非连续分配管理方式== 。 连续分配管理方式是指为一个用户程序分配一个连续的内存空间，常见的如 ==块式管理== ，同样地，非连续分配管理方式允许一个程序使用的内存分布在离散或者说不相邻的内存中，常见的如==页式管理== 和 ==段氏管理==</p></blockquote><ol><li><strong>块式管理</strong> ： 远古时代的计算机操系统的内存管理方式。将内存分为几个固定大小的块，每个块中只包含一个进程。如果程序运行需要内存的话，操作系统就分配给它一块，如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了。这些在每个块中未被利用的空间，我们称之为碎片。</li><li><strong>页式管理</strong> ：把主存分为大小相等且固定的一页一页的形式，页较小，相对相比于块式管理的划分力度更大，提高了内存利用率，减少了碎片。页式管理通过页表对应逻辑地址和物理地址。</li><li><strong>段式管理</strong> ： 页式管理虽然提高了内存利用率，但是页式管理其中的页实际并无任何实际意义。 段式管理把主存分为一段段的，每一段的空间又要比一页的空间小很多 。但是，最重要的是段是有实际意义的，每个段定义了一组逻辑信息，例如, 有主程序段 MAIN、子程序段 X、数据段 D 及栈段 S 等。 段式管理通过段表对应逻辑地址和物理地址。</li><li><strong>段页式管理机制</strong> 。段页式管理机制结合了段式管理和页式管理的优点。简单来说段页式管理机制就是把主存先分成若干段，每个段又分成若干页，也就是说 <strong>段页式管理机制</strong> 中段与段之间以及段的内部的都是离散的。</li></ol><h3 id="3-3-快表和多级页表"><a href="#3-3-快表和多级页表" class="headerlink" title="3.3 快表和多级页表"></a>3.3 快表和多级页表</h3><blockquote><p>页表管理机制中有两个很重要的概念：块表和多级页表，这两个东西分别解决了页表管理中很重要的两个问题。</p></blockquote><p>==1. 虚拟地址到物理地址的转换要快==</p><p>==2. 解决虚拟地址空间大，页表也会很大的问题==</p><p><strong>快表</strong></p><p>为了解决虚拟地址到物理地址的转换速度，操作系统在 <strong>页表方案</strong> 基础之上引入了 <strong>快表</strong> 来加速虚拟地址到物理地址的转换。我们可以把快表理解为一种特殊的高速缓冲存储器（Cache），其中的内容是页表的一部分或者全部内容。作为页表的 Cache，它的作用与页表相似，但是提高了访问速率。由于采用页表做地址转换，读写内存数据时 CPU 要访问两次主存。有了快表，有时只要访问一次高速缓冲存储器，一次主存，这样可加速查找并提高指令执行速度。</p><p>使用快表之后的地址转换流程是这样的：</p><ol><li>根据虚拟地址中的页号查快表；</li><li>如果该页在快表中，直接从快表中读取相应的物理地址；</li><li>如果该页不在快表中，就访问内存中的页表，再从页表中得到物理地址，同时将页表中的该映射表项添加到快表中；</li><li>当快表填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。</li></ol><p><strong>多级页表</strong></p><blockquote><p>引用多级页表的主要目的是为了避免把全部页表一直放在内存中占用过多空间，特别是那些根本就不需要的页表就不需要保留在内存中。多级页表属于时间换空间的典型场景</p></blockquote><p>==总结==</p><p>为了提高内存的空间性能，提出了多级页表的概念；但是提到空间性能是以浪费时间性能为基础的，因此为了补充损失的时间性能，提出了快表的概念。不论是快表还是多级页表实际上都是利用到了程序的局部性原理</p><h3 id="3-4-分页机制和分段机制的共同点和区别"><a href="#3-4-分页机制和分段机制的共同点和区别" class="headerlink" title="3.4 分页机制和分段机制的共同点和区别"></a>3.4 分页机制和分段机制的共同点和区别</h3><ol><li><strong>共同点</strong>：<ul><li>分页机制和分段机制都是为了提高内存利用率，较少内存碎片</li><li>页和段都是离散存储的，所以两者都是离散分配内存的方式，但是，每隔页和段中的内存是连续的。</li></ul></li><li><strong>区别：</strong><ul><li>页的大小是固定的，由操作系统决定；而段的大小不固定，取决于我们当前运行的程序</li><li>分页仅仅是为了满足操作系统内存管理的需求，而段是逻辑信息的单位，在衬托关系中可以体现为代码段，数据段，能够更好满足用户的需要</li></ul></li></ol><h3 id="3-5-逻辑（虚拟）地址和物理地址"><a href="#3-5-逻辑（虚拟）地址和物理地址" class="headerlink" title="3.5 逻辑（虚拟）地址和物理地址"></a>3.5 逻辑（虚拟）地址和物理地址</h3><blockquote><p>我们编程一般只有可能和逻辑地址打交道，比如在Java中，对象里面存储的数值就可以理解为内存中的一个地址，这个地址也就是我们说的逻辑地址，逻辑地址由操作系统决定。物理地址指的是真实物理内存中的地址，更具体一点来说就是内存地址寄存器中的地址。物理地址就是内存单元真正的地址</p></blockquote><h3 id="3-6-CPU寻址了解吗？为什么需要虚拟地址空间？"><a href="#3-6-CPU寻址了解吗？为什么需要虚拟地址空间？" class="headerlink" title="3.6 CPU寻址了解吗？为什么需要虚拟地址空间？"></a>3.6 CPU寻址了解吗？为什么需要虚拟地址空间？</h3><blockquote><p>现代处理器使用的是一种称为<strong>虚拟寻址</strong>的寻址方式。<strong>使用虚拟寻址，CPU需要将虚拟地址翻译成物理地址，这样才能访问到真实的物理内存</strong> 实际上完成虚拟地址转换为物理地址的硬件是CPU中含有一个被称为 <strong>内存管理单元</strong> 的硬件</p></blockquote><p><strong>为什么要有虚拟地址空间呢？</strong></p><p>先从没有虚拟地址空间的时候说起吧！没有虚拟地址空间的时候，<strong>程序都是直接访问和操作的都是物理内存</strong> 。但是这样有什么问题呢？</p><ol><li>用户程序可以访问任意内存，寻址内存的每个字节，这样就很容易（有意或者无意）破坏操作系统，造成操作系统崩溃。</li><li>想要同时运行多个程序特别困难，比如你想同时运行一个微信和一个 QQ 音乐都不行。为什么呢？举个简单的例子：微信在运行的时候给内存地址 1xxx 赋值后，QQ 音乐也同样给内存地址 1xxx 赋值，那么 QQ 音乐对内存的赋值就会覆盖微信之前所赋的值，这就造成了微信这个程序就会崩溃。</li></ol><p><strong>总结来说：如果直接把物理地址暴露出来的话会带来严重问题，比如可能对操作系统造成伤害以及给同时运行多个程序造成困难。</strong></p><p>通过虚拟地址访问内存有以下优势：</p><ul><li>程序可以使用一系列相邻的虚拟地址来访问物理内存中不相邻的大内存缓冲区。</li><li>程序可以使用一系列虚拟地址来访问大于可用物理内存的内存缓冲区。当物理内存的供应量变小时，内存管理器会将物理内存页（通常大小为 4 KB）保存到磁盘文件。数据或代码页会根据需要在物理内存与磁盘之间移动。</li><li>不同进程使用的虚拟地址彼此隔离。一个进程中的代码无法更改正在由另一进程或操作系统使用的物理内存。</li></ul><h2 id="四-虚拟内存"><a href="#四-虚拟内存" class="headerlink" title="四 虚拟内存"></a>四 虚拟内存</h2><h3 id="4-1-什么是虚拟内存？"><a href="#4-1-什么是虚拟内存？" class="headerlink" title="4.1 什么是虚拟内存？"></a>4.1 什么是虚拟内存？</h3><blockquote><p>通过虚拟内存让程序可以拥有超过系统物理内存大小的可用内存空间。另外，虚拟内存为每隔进程提供了一个一致的、私有的地址空间，它让每个进程产生了一种自己在独享主存的错觉（每个进程拥有一片连续完整的内存空间）这样会更加有效的管理内存并减少出错</p></blockquote><h3 id="4-2-局部性原理"><a href="#4-2-局部性原理" class="headerlink" title="4.2 局部性原理"></a>4.2 局部性原理</h3><blockquote><p>局部性原理是虚拟内存技术的基础，正是因为程序运行具有局部性原理，才可以只装入部分程序到内存中就开始运行</p></blockquote><p>局部性原理表现在以下两个方面：</p><ol><li><strong>时间局部性</strong> ：如果程序中的某条指令一旦执行，不久以后该指令可能再次执行；如果某数据被访问过，不久以后该数据可能再次被访问。产生时间局部性的典型原因，是由于在程序中存在着大量的循环操作。</li><li><strong>空间局部性</strong> ：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址，可能集中在一定的范围之内，这是因为指令通常是顺序存放、顺序执行的，数据也一般是以向量、数组、表等形式簇聚存储的。</li></ol><p>时间局部性是通过将近来使用的指令和数据保存到高速缓存存储器中，并使用高速缓存的层次结构实现。空间局部性通常是使用较大的高速缓存，并将预取机制集成到高速缓存控制逻辑中实现。虚拟内存技术实际上就是建立了 “内存一外存” 的两级存储器的结构，利用局部性原理实现髙速缓存。</p><h3 id="4-3-虚拟存储器"><a href="#4-3-虚拟存储器" class="headerlink" title="4.3 虚拟存储器"></a>4.3 虚拟存储器</h3><p>基于局部性原理，在程序装入时，可以将程序的一部分装入内存，而将其它部分留在外存，就可以启动程序执行。由于外存往往比内存打了很多，所以我们运行的软件的内存大小实际上是可以比计算机系统实际的内存大小大的。在程序执行过程中，当所访问的信息不在内存中时，有操作系统将所需要的部分调入内存，然后继续执行程序。另一方面，操作系统将内存中暂时不使用的内容换到外存上，从而腾出空间存放将要调入内存的信息。这样，计算机好像为用户提供了一个比实际内存大的多的存储器– 虚拟存储器</p><h3 id="4-4-虚拟内存的技术实现"><a href="#4-4-虚拟内存的技术实现" class="headerlink" title="4.4 虚拟内存的技术实现"></a>4.4 虚拟内存的技术实现</h3><blockquote><p>虚拟内存的实现需要建立在离散分配的内存管理方式的基础上。</p></blockquote><ol><li><strong>请求分页存储管理</strong> ：建立在分页管理之上，为了支持虚拟存储器功能而增加了请求调页功能和页面置换功能。请求分页是目前最常用的一种实现虚拟存储器的方法。请求分页存储管理系统中，在作业开始运行之前，仅装入当前要执行的部分段即可运行。假如在作业运行的过程中发现要访问的页面不在内存，则由处理器通知操作系统按照对应的页面置换算法将相应的页面调入到主存，同时操作系统也可以将暂时不用的页面置换到外存中。</li><li><strong>请求分段存储管理</strong> ：建立在分段存储管理之上，增加了请求调段功能、分段置换功能。请求分段储存管理方式就如同请求分页储存管理方式一样，在作业开始运行之前，仅装入当前要执行的部分段即可运行；在执行过程中，可使用请求调入中断动态装入要访问但又不在内存的程序段；当内存空间已满，而又需要装入新的段时，根据置换功能适当调出某个段，以便腾出空间而装入新的段。</li><li><strong>请求段页式存储管理</strong></li></ol><p>==请求分页与分页存储管理，两者有何不同==</p><p>请求分页存储管理建立在分页管理之上。它们的根本区别在于是否将程序全部所需的全部地址空间都装入主存，这也是求情分页存储管理可与提供虚拟内存的原因</p><p>它们之间的根本区别在于是否将一作业的全部地址空间同时装入主存。请求分页存储管理不要求将作业全部地址空间同时装入主存。基于这一点，请求分页存储管理可以提供虚存，而分页存储管理却不能提供虚存</p><p>不管是上面那种实现方式，我们一般都需要：</p><ol><li>一定容量的内存和外存：在载入程序的时候，只需要将程序的一部分装入内存，而将其他部分留在外存，然后程序就可以执行了；</li><li><strong>缺页中断</strong>：如果<strong>需执行的指令或访问的数据尚未在内存</strong>（称为缺页或缺段），则由处理器通知操作系统将相应的页面或段<strong>调入到内存</strong>，然后继续执行程序；</li><li><strong>虚拟地址空间</strong> ：逻辑地址到物理地址的变换。</li></ol><h3 id="4-5-页面置换算法"><a href="#4-5-页面置换算法" class="headerlink" title="4.5 页面置换算法"></a>4.5 页面置换算法</h3><p>地址映射过程中，若在页面中发现所要访问的页面不在内存中，则发生缺页中断</p><blockquote><p>==缺页中断== 就是要访问的<strong>页</strong>不在主存，需要操作系统将其调入主存后再进行访问。在这个时候，被内存映射的文件实际上就成为了一个分页交换文件。</p></blockquote><p>当发生缺页中断时，如果当前内存中并没有空闲的页面，操作系统就必须在内存选择一个页面将其移除内存，以便为即将调入的页面让出空间。用来选择淘汰那一页的规则叫做页面置换算法</p><ul><li><strong>OPT 页面置换算法（最佳页面置换算法）</strong> ：最佳 (Optimal, OPT) 置换算法所选择的被淘汰页面将是以后永不使用的，或者是在最长时间内不再被访问的页面, 这样可以保证获得最低的缺页率。但由于人们目前无法预知进程在内存下的若千页面中哪个是未来最长时间内不再被访问的，因而该算法无法实现。一般作为衡量其他置换算法的方法。</li><li><strong>FIFO（First In First Out） 页面置换算法（先进先出页面置换算法）</strong> : 总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。</li><li><strong>LRU （Least Currently Used）页面置换算法（最近最久未使用页面置换算法）</strong> ：LRU 算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 T，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。</li><li><strong>LFU （Least Frequently Used）页面置换算法（最少使用页面置换算法）</strong> : 该置换算法选择在之前时期使用最少的页面作为淘汰页。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;操作系统&quot;&gt;&lt;a href=&quot;#操作系统&quot; class=&quot;headerlink&quot; title=&quot;操作系统&quot;&gt;&lt;/a&gt;操作系统&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么要了解操作系统、&lt;/p&gt;
&lt;p&gt;操作系统中的很多思想、很多经典的算法，你都可以在我</summary>
      
    
    
    
    <category term="Os" scheme="http://wano.pro/categories/Os/"/>
    
    
    <category term="Os" scheme="http://wano.pro/tags/Os/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习笔记</title>
    <link href="http://wano.pro/scala/note1-Scala/"/>
    <id>http://wano.pro/scala/note1-Scala/</id>
    <published>2020-10-12T02:31:10.000Z</published>
    <updated>2020-10-15T02:51:42.903Z</updated>
    
    <content type="html"><![CDATA[<h3 id="scala基础"><a href="#scala基础" class="headerlink" title="scala基础"></a>scala基础</h3><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wanlce/pis-go-picture/raw/master/img/20201012143553.png"></p><p><strong>var和val的区别</strong></p><ol><li>内容是否可变</li><li>val修饰的变量在编译后，等同于加上final</li><li>是否可以有lazy修饰，val修饰的变量可以用lazy修饰</li></ol><p><strong>var声明一个变量</strong></p><ul><li>内容和引用都可以变</li></ul><p><strong>val声明一个变量</strong></p><ul><li>val修饰的变量是不可变的 <strong>不可变的不是内容，是引用</strong></li></ul><p>异步 多个线程 互相不影响<br>同步 等待</p><p>$伴生对象  单例实现static<br> 伴生类</p><p> 方法 方法名称 形参 返回类型</p><p> 伴生对象</p><ul><li>伴随类产生的对象</li><li>在scala中,没有static关键字,通过伴生对象模拟static关键字的实现</li><li>当通过object 名称定义一个伴生对象的时候,默认底层会编译生成两个字节码文件,一个是伴生类,另一个是伴生对象所属类.实际上我们所说的伴生对象是伴生对象所属类中定义的一个单例对象.然后通过对象.的方式访问属性或者方法等<br>静态内容放在伴生对象中 $</li></ul><ol><li><p>Scala中一切数据都是对象,都是Any的子类.</p></li><li><p>Scala中数据类型分为两大类:数值类型(AnyVal)、引用类型(AnyRef),不管是值烈性还是引用类型都是对象</p></li><li><p>Scala数据类型仍然遵守,低精度的值类型向高精度类型,自动转换(隐式转换)</p></li><li><p>Scala中的StringOps是对java中String增强</p></li><li><p>Unit: 对应java中的void,用于方法返回值的位置,表示方法没有返回值.Unit是一个数据类型,只有一个对象的就是(). Void不是数据类型,知识一个关键字</p></li><li><p>Null是一个类型,只有一个对象就是null.它是所有引用类型(AnyRef)的子列</p></li><li><p>Nothing,是所有数据类型的子类,主要用在一个函数没有明确返回值时使用,因为这样我们可以把抛出的返回值,返回给任何的变量或者函数</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wanlce/Picture/imgse925d42514cbabdea80312148713e96d48195992.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;scala基础&quot;&gt;&lt;a href=&quot;#scala基础&quot; class=&quot;headerlink&quot; title=&quot;scala基础&quot;&gt;&lt;/a&gt;scala基础&lt;/h3&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https:</summary>
      
    
    
    
    <category term="编程语言" scheme="http://wano.pro/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
    <category term="scala" scheme="http://wano.pro/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>八大排序算法</title>
    <link href="http://wano.pro/alg/sort/"/>
    <id>http://wano.pro/alg/sort/</id>
    <published>2020-09-23T12:32:00.125Z</published>
    <updated>2021-03-12T04:30:41.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="八大排序算法"><a href="#八大排序算法" class="headerlink" title="八大排序算法"></a>八大排序算法</h1><h2 id="一、分类"><a href="#一、分类" class="headerlink" title="一、分类"></a>一、分类</h2><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wanlce/pis-go-picture/raw/master/img/20200925123701.jpg"></p><h2 id="二、复杂度分析，算法稳定性和适用场景"><a href="#二、复杂度分析，算法稳定性和适用场景" class="headerlink" title="二、复杂度分析，算法稳定性和适用场景"></a>二、复杂度分析，算法稳定性和适用场景</h2><ul><li><p><strong>稳定</strong>：如果a原本在b前面，而a=b，排序后a仍然在b的前面</p></li><li><p><strong>时间复杂度</strong>: 对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</p></li><li><p><strong>空间复杂度</strong>: 是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wanlce/pis-go-picture/raw/master/img/20200925123653.jpg"></p></li></ul><h2 id="三、八大排序"><a href="#三、八大排序" class="headerlink" title="三、八大排序"></a>三、八大排序</h2><h3 id="1、选择排序"><a href="#1、选择排序" class="headerlink" title="1、选择排序"></a>1、选择排序</h3><hr><p><strong>1.</strong> <strong>第一个跟后面的所有数相比，</strong>如果小于（或小于）第一个数的时候，暂存较小数的下标，第一趟结束后，将第一个数，与暂存的那个最小数进行交换，第一个数就是最小（或最大的数）</p><p><strong>2.</strong> 下标移到第二位，第二个数跟后面的所有数相比，一趟下来，确定第二小（或第二大）的数</p><p>重复以上步骤</p><p>直到指针移到倒数第二位，确定倒数第二小（或倒数第二大）的数，那么最后一位也就确定了，排序完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SimpleChoose</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp,index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[index] &gt; arr[j])</span><br><span class="line">                    index = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(index &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">                arr[i] = arr[index];</span><br><span class="line">                arr[index] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2、冒泡排序"><a href="#2、冒泡排序" class="headerlink" title="2、冒泡排序"></a>2、冒泡排序</h3><hr><ol><li><p><strong>相邻两个数两两相比</strong>，n[i]跟n[j+1]比，如果n[i]&gt;n[j+1]，则将连个数进行交换</p></li><li><p>j++, 重复以上步骤，第一趟结束后，最大数就会被确定在最后一位，这就是冒泡排序又称大（小）数沉底</p></li><li><p>i++,重复以上步骤，直到i=n-1结束，排序完成</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3、直接插入排序"><a href="#3、直接插入排序" class="headerlink" title="3、直接插入排序"></a>3、直接插入排序</h3><hr><p><strong>1.</strong> 从第二位开始遍历，</p><p><strong>2.</strong> 当前数（第一趟是第二位数）<strong>与前面的数依次比较，如果前面的数大于当前数，则将这个数放在当前数的位置上，当前数的下标-1</strong></p><p><strong>3. 重复以上步骤，直到当前数不大于前面的某一个数为止，这时，将当前数，放到这个位置，</strong>1-3步就是保证当前数的前面的数都是有序的，内层循环的目的就是将当前数插入到前面的有序序列里</p><p><strong>4.</strong> 重复以上3步，直到遍历到最后一位数，并将最后一位数插入到合适的位置，插入排序结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp =<span class="number">0</span>,j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span>(j = i; j &gt;<span class="number">0</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果当前数前面的一个数大于当前数 把前面的数后移一个位置</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j-<span class="number">1</span>] &gt; temp)</span><br><span class="line">                &#123;</span><br><span class="line">                    arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">//第一个数已经移动到第二位 把当前数放到第一个数上 这一趟结束</span></span><br><span class="line">                    <span class="keyword">if</span>(j == <span class="number">1</span>) &#123;</span><br><span class="line">                        arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    arr[j] = temp;  <span class="comment">//如果不大于 直接把当前数放到j的位置上</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4、快速排序"><a href="#4、快速排序" class="headerlink" title="4、快速排序"></a>4、快速排序</h3><hr><p><strong>1.</strong> 第一趟，第一个数为基数temp，设置两个指针left = 0，right = n.length，</p><p>　　①从right开始与基数temp比较，如果n[right]&gt;基数temp，则right指针向前移一位，继续与基数temp比较，直到不满足n[right]&gt;基数temp</p><p>　　②将n[right]赋给n[left]</p><p>　　③从left开始与基数temp比较，如果n[left]&lt;=基数temp，则left指针向后移一位，继续与基数temp比较，直到不满足n[left]&lt;=基数temp</p><p>　　④将n[left]赋给n[rigth]</p><p>　　⑤重复①-④步，直到left==right结束，将基数temp赋给n[left]</p><p><strong>2.</strong> 第二趟，将数组从中间分隔，每个数组再进行第1步的操作，然后再将分隔后的数组进行分隔再快排，</p><p><strong>3.</strong> 递归重复分隔快排，直到数组不能再分，也就是只剩下一个元素的时候，结束递归，排序完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.快速排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Quicksort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= end)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> low = start;</span><br><span class="line">        <span class="keyword">int</span> high = end;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[start];</span><br><span class="line">        <span class="keyword">while</span>( low &lt; high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot)</span><br><span class="line">                high--;</span><br><span class="line">            arr[low] = arr[high];</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivot)</span><br><span class="line">                low++;</span><br><span class="line">            arr[high] = arr[low];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[low] = pivot;</span><br><span class="line">        Quicksort(arr,start,low-<span class="number">1</span>);</span><br><span class="line">        Quicksort(arr,low+<span class="number">1</span>,end);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5、归并排序"><a href="#5、归并排序" class="headerlink" title="5、归并排序"></a>5、归并排序</h3><hr><p>归并排序就是递归得将原始数组递归对半分隔，直到不能再分（只剩下一个元素）后，开始从最小的数组向上归并排序</p><ol><li><p>向上归并排序的时候，需要一个暂存数组用来排序，</p></li><li><p>将待合并的两个数组，从第一位开始比较，小的放到暂存数组，指针向后移，</p></li><li><p>直到一个数组空，这时，不用判断哪个数组空了，直接将两个数组剩下的元素追加到暂存数组里，</p></li><li><p>再将暂存数组排序后的元素放到原数组里，两个数组合成一个，这一趟结束。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.归并排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &lt; end)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (start+end)/<span class="number">2</span>;</span><br><span class="line">            MergeSort(arr,<span class="number">0</span>,middle);</span><br><span class="line">            MergeSort(arr,middle+<span class="number">1</span>,end);</span><br><span class="line">            Merge(arr,start,middle,end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> middle,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">int</span> temp = start;</span><br><span class="line">        <span class="keyword">int</span> rightstart = middle+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> third = start;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= middle &amp;&amp; rightstart &lt; end)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//一个一个往新的数组放值，遍历被分开的两个数组</span></span><br><span class="line">            <span class="comment">//比较两个小数组相应的下标位置的数字大小 ，小的放前面</span></span><br><span class="line">            <span class="keyword">if</span>(arr[start] &lt;= arr[rightstart])</span><br><span class="line">                result[third++] = arr[start++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                result[third++] = arr[rightstart++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果左边还有需要拷贝 把左边数组剩下的拷贝到新数组</span></span><br><span class="line">        <span class="keyword">while</span>(start &lt;= middle) result[third++] = arr[start++];</span><br><span class="line">        <span class="comment">//如果右边还需要拷贝 ~</span></span><br><span class="line">        <span class="keyword">while</span> (rightstart &lt; end) result[third++] = arr[rightstart++];</span><br><span class="line">        <span class="keyword">while</span> (temp &lt; end) arr[temp] = result[temp++];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6、基数排序"><a href="#6、基数排序" class="headerlink" title="6、基数排序"></a>6、基数排序</h3><hr><p>基数排序第i趟将待排数组里的每个数的i位数放到temp（j=1-10）队列中，然后再从这十个队列中取出数据，重新放到原数组里，直到i大于待排数的最大位数。</p><p>1.数组里的数最大位数是n位，就需要排n趟，例如数组里最大的数是3位数，则需要排3趟。</p><p>2.若数组里共有m个数，则需要十个长度为m的数组temp(j=0-9）用来暂存i位上数为j的数，例如，第1趟，各位数为0的会被分配到temp0数组里，各位数为1的会被分配到temp1数组里……</p><p>3.分配结束后，再依次从temp数组中取出数据，遵循先进先进原则，例如对数组{1，11，2，44，4}，进行第1趟分配后，temp1={1,11}，temp2={2}，temp4={44，4}，依次取出元素后{1，11，2，44，4}，第一趟结束</p><p>4.循环到n趟后结束，排序完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6.基数排序</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RadixSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> maxlength = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(arr[i] &gt; maxlength) maxlength = arr[i];</span><br><span class="line">       &#125;</span><br><span class="line">       maxlength = (maxlength+<span class="string">&quot;&quot;</span>).length();</span><br><span class="line">       <span class="comment">//用于暂存数据的数组</span></span><br><span class="line">       <span class="keyword">int</span>[][] temp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line">       <span class="comment">//用于记录temp数组中每个桶的内存数据的数量</span></span><br><span class="line">       <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">       <span class="comment">//用于计算每个数的i位数</span></span><br><span class="line">       <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//用于取的元素需要放的位置</span></span><br><span class="line">       <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//根据最大长度决定排序的次数</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,n = <span class="number">1</span>; i &lt; maxlength; i++,n*=<span class="number">10</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++)</span><br><span class="line">           &#123;</span><br><span class="line">               num = arr[j]/n%<span class="number">10</span>;</span><br><span class="line">               temp[num][counts[num]] = arr[j];</span><br><span class="line">               counts[num]++;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//从temp中取元素重新放到arr数组中</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; counts.length; k++)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; counts[k]; v++)</span><br><span class="line">               &#123;</span><br><span class="line">                   arr[index] = temp[k][v];</span><br><span class="line">                   index++;</span><br><span class="line">               &#125;</span><br><span class="line">               counts[k] = <span class="number">0</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           index = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7、希尔排序"><a href="#7、希尔排序" class="headerlink" title="7、希尔排序"></a>7、希尔排序</h3><hr><p><strong>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//7.希尔排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="comment">//控制增量序列,当增量序列为1的时候为最后一趟</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length/<span class="number">2</span>; i &gt; <span class="number">0</span>; i/=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//根据增量序列找到每个组比较序列的最后一个位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; arr.length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//根据比较序列的最后一个数的位置,依次向前执行插入排序</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = j - i; k &gt;= <span class="number">0</span>; k -= i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[k] &gt; arr[k+i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp = arr[k];</span><br><span class="line">                        arr[k] = arr[k+i];</span><br><span class="line">                        arr[k+i] = temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="8、堆排序"><a href="#8、堆排序" class="headerlink" title="8、堆排序"></a>8、堆排序</h3><hr><p><strong>大顶堆：arr[i] &gt;= arr[2i+1] &amp;&amp; arr[i] &gt;= arr[2i+2]</strong>  </p><p><strong>小顶堆：arr[i] &lt;= arr[2i+1] &amp;&amp; arr[i] &lt;= arr[2i+2]</strong>  </p><p><strong>步骤一 构造初始堆。将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)。</strong></p><p><strong>步骤二 将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//8.堆排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//从最后一个非叶子结点开始构建大顶堆</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length/<span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            maximumHeap(i,arr);</span><br><span class="line">        <span class="comment">//从最小的叶子结点开始与根节点进行交换并重新构建大顶堆</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;=<span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(arr,<span class="number">0</span>,i);</span><br><span class="line">            maximumHeap(<span class="number">0</span>,arr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maximumHeap</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i*<span class="number">2</span> + <span class="number">1</span>; j &lt; arr.length; j = j*<span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//如果右孩子大于左孩子，则指向右孩子</span></span><br><span class="line">            <span class="keyword">if</span>(j+<span class="number">1</span> &lt; arr.length &amp;&amp; arr[j+<span class="number">1</span>] &gt; arr[j]) j++;</span><br><span class="line">         <span class="comment">//如果最大的孩子大于当前结点，则把大孩子赋给当前结点，修改当前结点为大孩子结点 再往下走</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; temp)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                i = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] =temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="四、完整测试代码"><a href="#四、完整测试代码" class="headerlink" title="四、完整测试代码"></a>四、完整测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wano</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/25 9:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.简单选择排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SimpleChoose</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp,index = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            index = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[index] &gt; arr[j])</span><br><span class="line">                    index = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(index &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = arr[i];</span><br><span class="line">                arr[i] = arr[index];</span><br><span class="line">                arr[index] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.冒泡排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.直接插入排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp =<span class="number">0</span>,j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span>(j = i; j &gt;<span class="number">0</span>; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果当前数前面的一个数大于当前数 把前面的数后移一个位置</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j-<span class="number">1</span>] &gt; temp)</span><br><span class="line">                &#123;</span><br><span class="line">                    arr[j] = arr[j-<span class="number">1</span>];</span><br><span class="line">                    <span class="comment">//第一个数已经移动到第二位 把当前数放到第一个数上 这一趟结束</span></span><br><span class="line">                    <span class="keyword">if</span>(j == <span class="number">1</span>) &#123;</span><br><span class="line">                        arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    arr[j] = temp;  <span class="comment">//如果不大于 直接把当前数放到j的位置上</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.快速排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Quicksort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &gt;= end)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> low = start;</span><br><span class="line">        <span class="keyword">int</span> high = end;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[start];</span><br><span class="line">        <span class="keyword">while</span>( low &lt; high)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot)</span><br><span class="line">                high--;</span><br><span class="line">            arr[low] = arr[high];</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivot)</span><br><span class="line">                low++;</span><br><span class="line">            arr[high] = arr[low];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[low] = pivot;</span><br><span class="line">        Quicksort(arr,start,low-<span class="number">1</span>);</span><br><span class="line">        Quicksort(arr,low+<span class="number">1</span>,end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.归并排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &lt; end)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (start+end)/<span class="number">2</span>;</span><br><span class="line">            MergeSort(arr,<span class="number">0</span>,middle);</span><br><span class="line">            MergeSort(arr,middle+<span class="number">1</span>,end);</span><br><span class="line">            Merge(arr,start,middle,end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> start,<span class="keyword">int</span> middle,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">        <span class="keyword">int</span> temp = start;</span><br><span class="line">        <span class="keyword">int</span> rightstart = middle+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> third = start;</span><br><span class="line">        <span class="keyword">while</span>(start &lt;= middle &amp;&amp; rightstart &lt; end)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//一个一个往新的数组放值，遍历被分开的两个数组</span></span><br><span class="line">            <span class="comment">//比较两个小数组相应的下标位置的数字大小 ，小的放前面</span></span><br><span class="line">            <span class="keyword">if</span>(arr[start] &lt;= arr[rightstart])</span><br><span class="line">                result[third++] = arr[start++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                result[third++] = arr[rightstart++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果左边还有需要拷贝 把左边数组剩下的拷贝到新数组</span></span><br><span class="line">        <span class="keyword">while</span>(start &lt;= middle) result[third++] = arr[start++];</span><br><span class="line">        <span class="comment">//如果右边还需要拷贝 ~</span></span><br><span class="line">        <span class="keyword">while</span> (rightstart &lt; end) result[third++] = arr[rightstart++];</span><br><span class="line">        <span class="keyword">while</span> (temp &lt; end) arr[temp] = result[temp++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.基数排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RadixSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxlength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; maxlength) maxlength = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        maxlength = (maxlength+<span class="string">&quot;&quot;</span>).length();</span><br><span class="line">        <span class="comment">//用于暂存数据的数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] temp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line">        <span class="comment">//用于记录temp数组中每个桶的内存数据的数量</span></span><br><span class="line">        <span class="keyword">int</span>[] counts = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">//用于计算每个数的i位数</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//用于取的元素需要放的位置</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//根据最大长度决定排序的次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,n = <span class="number">1</span>; i &lt; maxlength; i++,n*=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                num = arr[j]/n%<span class="number">10</span>;</span><br><span class="line">                temp[num][counts[num]] = arr[j];</span><br><span class="line">                counts[num]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//从temp中取元素重新放到arr数组中</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; counts.length; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; counts[k]; v++)</span><br><span class="line">                &#123;</span><br><span class="line">                    arr[index] = temp[k][v];</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                counts[k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7.希尔排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="comment">//控制增量序列,当增量序列为1的时候为最后一趟</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length/<span class="number">2</span>; i &gt; <span class="number">0</span>; i/=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//根据增量序列找到每个组比较序列的最后一个位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; arr.length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//根据比较序列的最后一个数的位置,依次向前执行插入排序</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = j - i; k &gt;= <span class="number">0</span>; k -= i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[k] &gt; arr[k+i])</span><br><span class="line">                    &#123;</span><br><span class="line">                        temp = arr[k];</span><br><span class="line">                        arr[k] = arr[k+i];</span><br><span class="line">                        arr[k+i] = temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8.堆排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//从最后一个非叶子结点开始构建大顶堆</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length/<span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            maximumHeap(i,arr);</span><br><span class="line">        <span class="comment">//从最小的叶子结点开始与根节点进行交换并重新构建大顶堆</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;=<span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            swap(arr,<span class="number">0</span>,i);</span><br><span class="line">            maximumHeap(<span class="number">0</span>,arr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maximumHeap</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span>[] arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i*<span class="number">2</span> + <span class="number">1</span>; j &lt; arr.length; j = j*<span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果右孩子大于左孩子，则指向右孩子</span></span><br><span class="line">            <span class="keyword">if</span>(j+<span class="number">1</span> &lt; arr.length &amp;&amp; arr[j+<span class="number">1</span>] &gt; arr[j]) j++;</span><br><span class="line">            <span class="comment">//如果最大的孩子大于当前结点，则把大孩子赋给当前结点，修改当前结点为大孩子结点 再往下走</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; temp)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                i = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] =temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random(<span class="number">48</span>);</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= len-<span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i :arr</span><br><span class="line">             ) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> start_time = System.nanoTime(); <span class="comment">//开始排序的时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//SimpleChoose(arr);  //简单选择排序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//BubbleSort(arr);   //冒泡排序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Quicksort(arr,0,len-1);  //快速排序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//InsertSort(arr,len);   //直接插入排序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//MergeSort(arr,0,len - 1);  //归并排序</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//RadixSort(arr);      //基数排序</span></span><br><span class="line">        </span><br><span class="line">        ShellSort(arr);       <span class="comment">//希尔排序</span></span><br><span class="line"></span><br><span class="line">        HeapSort(arr);        <span class="comment">//堆排序</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end_time = System.nanoTime();<span class="comment">//排序结束的时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n==================&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i :arr</span><br><span class="line">        ) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n排序所用时间:&quot;</span>+ (end_time - start_time)+<span class="string">&quot;ns&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">选择、冒泡、插入、快速、归并、基数希尔、堆</summary>
    
    
    
    <category term="算法" scheme="http://wano.pro/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="sort" scheme="http://wano.pro/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记</title>
    <link href="http://wano.pro/error/git%E7%AC%94%E8%AE%B0/"/>
    <id>http://wano.pro/error/git%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-26T05:50:50.000Z</published>
    <updated>2021-03-01T03:11:32.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git笔记"><a href="#Git笔记" class="headerlink" title="Git笔记"></a>Git笔记</h2><ol><li><p>修改文件后提交修改到版本库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>查看历史版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> <span class="comment"># 显示最近到最远的提交</span></span><br><span class="line">git reflog <span class="comment"># 显示所有执行过的命令</span></span><br></pre></td></tr></table></figure></li><li><p>回退到历史版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回到上一个版本</span></span><br><span class="line">git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到上上一个版本</span></span><br><span class="line">git reset --hard HEAD^^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到上一个版本 (同上)</span></span><br><span class="line">git reset --hard HEAD~1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到制定版本</span></span><br><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure></li></ol><h3 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h3><ol><li><p>工作区: 存放项目的目录</p></li><li><p>暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文件的修改添加到暂存区中</span></span><br><span class="line">git add <span class="string">&quot;file&quot;</span></span><br><span class="line"><span class="comment"># 把暂存区的修改提交到分支</span></span><br><span class="line">git commit</span><br></pre></td></tr></table></figure></li></ol><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地修改没有git add到暂存区, 回退到上一个git add或git commit</span></span><br><span class="line">git checkout -- &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地修改已经git add到暂存区, 撤销本次git add, 同时撤销本次修改</span></span><br><span class="line">git reset HEAD &lt;file&gt;</span><br><span class="line">git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><ol><li><p>准备工作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在工作区新建test文件</span></span><br><span class="line">touch <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 添加到暂存区</span></span><br><span class="line">git add <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 提交到分支</span></span><br><span class="line">git commit -m <span class="string">&quot;add test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在本地删除test</span></span><br><span class="line">rm <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 工作区和版本库不一致</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure></li><li><p>确定删除文件test</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm <span class="built_in">test</span></span><br><span class="line"><span class="comment"># git add test 等价</span></span><br><span class="line">git commit -m <span class="string">&quot;remove test&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>恢复工作区文件(误删)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><ol><li><p>添加远程库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化本地目录为git仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment"># 关联一个远程库</span></span><br><span class="line">git remote add origin git@github.com:your_name/repo_name.git</span><br><span class="line">git push --set-upstream origin master</span><br><span class="line"><span class="comment"># 本地同步远程仓库</span></span><br><span class="line">git pull origin master</span><br><span class="line"><span class="comment"># 提交到远程仓库</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li><li><p>克隆远程库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:your_name/repo_name.git</span><br></pre></td></tr></table></figure></li></ol><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h4><ol><li><p>创建新分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建dev分支</span></span><br><span class="line">git branch dev</span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout dev</span><br><span class="line"><span class="comment"># 查看当前分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 查看所有分支</span></span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure></li><li><p>合并分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到主分支, 切换前要git commit</span></span><br><span class="line">git checkout master</span><br><span class="line"><span class="comment"># 合并dev到当前分支</span></span><br><span class="line">git merge dev</span><br><span class="line"><span class="comment"># 删除dev分支</span></span><br><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure></li></ol><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>当master和dev同时修改文件, 在git merge时会出现冲突, 需要手动解决冲突, 重新提交.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看冲突信息</span></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># 打开冲突文件</span></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">5</span><br><span class="line">=======</span><br><span class="line">five</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;表示不同的分支, 手动修改之后重新提交</span></span><br><span class="line">git add &lt;file&gt;</span><br><span class="line">git commit -m <span class="string">&quot;conflict fixed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除dev分支</span></span><br><span class="line">git　branch -d dev</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看分支合并图</span></span><br><span class="line">git <span class="built_in">log</span> --graph</span><br></pre></td></tr></table></figure><h4 id="分支管理-1"><a href="#分支管理-1" class="headerlink" title="分支管理"></a>分支管理</h4><p><code>git merge</code>, 在处理合并时如果可以, <code>git</code>会使用<code>Fast forward</code>模式, 删除分支后会丢掉分支信息</p><p><code>no-ff</code>强制禁止<code>Fast forward</code>, 在合并的时候多出一个<code>commit</code>记录, 保存分支信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不使用 Fast forward模式合并分支</span></span><br><span class="line">git merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> dev</span><br><span class="line"><span class="comment"># 查看分区合并</span></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit    </span><br></pre></td></tr></table></figure><h4 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h4><p>当dev分支的工作未完成, 你需要紧急修复buf, 这时可以把当前分支暂时储存起来. 完成其他工作之后, 可以恢复现场继续工作.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 储存现场</span></span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在master下新建分支并切换</span></span><br><span class="line">git chekcout master</span><br><span class="line">git checkout -b &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成工作后提交</span></span><br><span class="line">git add &lt;file&gt;</span><br><span class="line">git commit -m <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到之前分支</span></span><br><span class="line">git checkout &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看保存的工作现场</span></span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复现场</span></span><br><span class="line">    <span class="comment">## 1.恢复并删除 </span></span><br><span class="line">    git stash pop</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 2.恢复, 删除</span></span><br><span class="line">    git stash apply stash@&#123;0&#125;</span><br><span class="line">    git stash drop stash@&#123;0&#125;</span><br></pre></td></tr></table></figure><p>在上面bug分支修复的错误, 在当前dev上同样也存在问题, 可以使用<code>cherry-pick</code>复制一个<code>commit</code>, 同事<code>git</code>会新创建一个<code>commit</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick commit_id</span><br></pre></td></tr></table></figure><p>更简单的, 可以先用<code>git stash</code>报工作现场储存起来, 然后在当前分支修复<code>bug</code> 之后恢复现场继续工作.</p><h4 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h4><p>当需要添加新功能时, 可以创建feature分支, 测试完成之后, 再合并到当前分支.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建feature分支</span></span><br><span class="line">git checkout -b feature</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除没有合并的分支</span></span><br><span class="line">git branch -D feature</span><br></pre></td></tr></table></figure><h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看远程仓库</span></span><br><span class="line">git remote</span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地master分支推送到远程库</span></span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将远程库的dev分支创建到本地</span></span><br><span class="line">git checkout -b dev origin/dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多人向dev合并, 会出现冲突</span></span><br><span class="line">    <span class="comment"># 将远程库dev分支, 同步到本地</span></span><br><span class="line">    git pull</span><br><span class="line">    <span class="comment"># git pull失败, 没有和远程库链接</span></span><br><span class="line">    git branch --set-upstream-to =origin/dev dev</span><br><span class="line">    <span class="comment"># git pull之后, 手动解决冲突, 然后上传</span></span><br></pre></td></tr></table></figure><h4 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h4><p>多次本地提交或从远端pull下来之后, 本地的版本库会同时有多个commit, 通过–graph查看会觉得混乱, 可以使用rebase, 将多个commit合并成一个, 使得分支变得顺滑~.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 合并commit</span></span><br><span class="line">git rebase</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果出现冲突, 需要解决冲突之后重新git rebase</span></span><br><span class="line">git add .</span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略特殊文件</span></span><br><span class="line">.gitignore</span><br><span class="line"><span class="comment"># 查看.gitignore的规则</span></span><br><span class="line">git check-ignore -v &lt;file&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git笔记&quot;&gt;&lt;a href=&quot;#Git笔记&quot; class=&quot;headerlink&quot; title=&quot;Git笔记&quot;&gt;&lt;/a&gt;Git笔记&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改文件后提交修改到版本库&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;</summary>
      
    
    
    
    <category term="Git" scheme="http://wano.pro/categories/Git/"/>
    
    
    <category term="Git" scheme="http://wano.pro/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Singleton</title>
    <link href="http://wano.pro/Java/Singleton/"/>
    <id>http://wano.pro/Java/Singleton/</id>
    <published>2020-03-14T12:23:19.000Z</published>
    <updated>2020-03-14T12:23:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简单的总结下常见的单例设计模式</p></blockquote><h3 id="1-饿汉式"><a href="#1-饿汉式" class="headerlink" title="1-饿汉式"></a>1-饿汉式</h3><hr><p><strong>线程安全</strong> 容易产生垃圾对象</p><p><strong>优点</strong>：没有加锁，执行效率会提高</p><p><strong>缺点</strong>： 类加载的时候初始化，浪费内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Instance&#123;</span><br><span class="line">    private static Instance instance &#x3D; new Instance();</span><br><span class="line">    private Instance()&#123;&#125;</span><br><span class="line">    public static Instance getInstance()&#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-懒汉式-线程不安全"><a href="#2-懒汉式-线程不安全" class="headerlink" title="2-懒汉式-线程不安全"></a>2-懒汉式-线程不安全</h3><hr><p>多线程下不能正常工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instance</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Instance instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Instance</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Instance <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)  instance = <span class="keyword">new</span> Instance();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-懒汉式-线程安全"><a href="#3-懒汉式-线程安全" class="headerlink" title="3-懒汉式-线程安全"></a>3-懒汉式-线程安全</h3><hr><p>使用 synchronized加锁机制来实现线程安全但是<strong>效率低</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instance</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Instance instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Instance</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Instance <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) <span class="keyword">return</span> instance = <span class="keyword">new</span> Instance();</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-双检锁-双重下校验锁"><a href="#4-双检锁-双重下校验锁" class="headerlink" title="4-双检锁/双重下校验锁"></a>4-双检锁/双重下校验锁</h3><hr><p>采用双锁机制，安全且在多线程情况下能保持高性能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>()</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="keyword">null</span>) singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-登记式-静态内部类"><a href="#5-登记式-静态内部类" class="headerlink" title="5-登记式/静态内部类"></a>5-登记式/静态内部类</h3><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingltonHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTACE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-枚举"><a href="#6-枚举" class="headerlink" title="6-枚举"></a>6-枚举</h3><hr><p>这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。<br>这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    INSTACNE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><hr><p>一般情况下，不建议使用第 2 种和第 3 种懒汉方式，建议使用第 1 种饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用第 5 种登记方式。如果涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。如果有其他特殊的需求，可以考虑使用第 4 种双检锁方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简单的总结下常见的单例设计模式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-饿汉式&quot;&gt;&lt;a href=&quot;#1-饿汉式&quot; class=&quot;headerlink&quot; title=&quot;1-饿汉式&quot;&gt;&lt;/a&gt;1-饿汉式&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;st</summary>
      
    
    
    
    <category term="Design Patterns" scheme="http://wano.pro/categories/Design-Patterns/"/>
    
    
    <category term="Singleton" scheme="http://wano.pro/tags/Singleton/"/>
    
  </entry>
  
</feed>
